{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "Hex Casting",
    "scopeName": "source.hexcasting",
    "patterns": [
        { "include": "#comment" },
        { "include": "#bracket" },
        { "include": "#escape" },
        { "include": "#directive" },
        { "include": "#iota" },
        { "include": "#linepattern" }
    ],
    "repository": {
        "escape": {
            "patterns": [
                {
                    "name": "constant.character.escape",
                    "match": "\\bConsideration.*?(?=//|/\\*|{|}|$)"
                }
            ]
        },
        "comment": {
            "patterns": [
                {
                    "name": "comment.line.double-slash",
                    "match": "//.*"
                },
                {
                    "name": "comment.block",
                    "begin": "/\\*",
                    "end": "\\*/"
                }
            ]
        },
        "bracket": {
            "patterns": [
                {
                    "name": "punctuation.definition.block",
                    "match": "[{}\\[\\]]"
                }
            ]
        },
        "pattern": {
            "patterns": [
                {
                    "name": "support.type",
                    "match": "Reflection|Purification|Distillation|Exaltation|Decomposition|Disintegration|Gambit|Nadir|Zenith|Dstl\\."
                },
                {
                    "name": "variable.parameter",
                    "match": "(?<!Consideration.*)(?<=:)[^/\n<]+"
                },
                {
                    "name": "variable.parameter",
                    "match": "(?<=Vector\\s+Reflection\\s+)([+-][XYZ]|Zero)"
                },
                {
                    "name": "punctuation.separator.colon",
                    "match": "(?<!(?:/\\*|//).*):"
                },
                {
                    "name": "entity.name.function",
                    "match": "(?!//|/\\*| )[a-zA-Z0-9:'+\\-./ _]+?(?= *(?://|/\\*|:|))"
                }
            ]
        },
        "linepattern": {
            "name": "hexcasting.linepattern",
            "begin": "^\\s*(?!\\s*Consideration|//|/\\*)",
            "end": "(?=//|/\\*|<)|$",
            "patterns": [{ "include": "#pattern" }]
        },
        "iota": {
            "name": "string.unquoted, punctuation.definition",
            "match": "<(?:{(.*)}|\\\\(.*)|<(.*)>|(.*))>",
            "captures": {
                "1": { "patterns": [{ "include": "#iotainner" }] },
                "2": { "patterns": [{ "include": "#iotainner" }] },
                "3": { "patterns": [{ "include": "#iotainner" }] },
                "4": { "patterns": [{ "include": "#iotainner" }] }
            }
        },
        "iotainner": {
            "name": "constant constant.numeric",
            "match": ".+"
        },
        "directive": {
            "name": "hexcasting.directive",
            "begin": "^(?=#)",
            "end": "$",
            "patterns": [
                {
                    "name": "punctuation.definition.directive",
                    "match": "^#|[()]"
                },
                { "include": "#define" },
                { "include": "#include" }
            ]
        },
        "define": {
            "name": "hexcasting.directive.define",
            "patterns": [
                {
                    "name": "keyword.control.directive.define",
                    "match": "(?<=^#)define"
                },
                {
                    "name": "keyword.control.directive.assignment",
                    "match": "="
                },
                {
                    "name": "string.unquoted, meta.preprocessor.macro",
                    "begin": "(?<== *)",
                    "end": "$",
                    "patterns": [
                        {
                            "name": "markup.underline",
                            "match": "(?<= +|->|^)(((?!->)[^ \n])((?!->).)*((?!->)[^ \n])|[^ \n])(?= |->|$)"
                        }
                    ]
                },
                {
                    "name": "string.unquoted, meta.preprocessor.macro",
                    "match": "(?<=\\().+(?=\\))"
                },
                {
                    "name": "entity.name.function.preprocessor",
                    "match": ".+?(?=\\(|=|$)"
                }
            ]
        },
        "include": {
            "name": "hexcasting.directive.include",
            "patterns": [
                {
                    "name": "keyword.control.directive.include",
                    "match": "(?<=^#)include"
                },
                {
                    "name": "string.quoted.double",
                    "begin": "(\")",
                    "end": "(\")",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.string.begin"
                        }
                    },
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.definition.string.end"
                        }
                    }
                }
            ]
        }
    }
}
